apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'
apply plugin: 'com.github.dcendents.android-maven'

Properties properties = new Properties()
try {
    properties.load(project.rootProject.file('bintray.public.properties').newDataInputStream())
} catch (IOException e) {
    println("bintray.public.properties not found. This can be ignored, unless you want to publish. " + e.localizedMessage)
}


Properties secretProperties = new Properties()
try {
    secretProperties.load(project.rootProject.file('local.properties').newDataInputStream())
} catch (IOException e) {
    println("local.properties not found. This can be ignored, unless you want to publish. " + e.localizedMessage)
}


group = properties.getProperty("library.groupId")
version = properties.getProperty("library.version")

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'
            groupId properties.getProperty("library.groupId")
            artifactId properties.getProperty("library.artifact")

            description properties.getProperty("library.description")
            url properties.getProperty("library.siteURL")

            licenses {
                license {
                    name properties.getProperty("license.name")
                    url properties.getProperty("license.url")
                }
            }
            scm {
                connection properties.getProperty("library.gitURL")
                developerConnection properties.getProperty("library.gitURL")
                url properties.getProperty("library.siteURL")
            }
        }
    }
}


task sourcesJar(type: Jar) {
    classifier = 'sources'
    from kotlin.sourceSets.main.kotlin.srcDirs
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

task javadocJar(type: Jar, dependsOn: 'dokka') {
    classifier = 'javadoc'
    from fileTree(new File(project.buildDir, 'javadoc'))
}


artifacts {
    archives javadocJar
    archives sourcesJar
}

//publish using: ./gradlew clean swagger-dsl:build swagger-dsl:publishSwaggerPublicationToMavenRepository
publishing {
    publications {
        swagger(MavenPublication) {
            groupId properties.getProperty("library.groupId")
            artifactId properties.getProperty("library.artifact")
            version properties.getProperty("library.version")
            artifact(sourcesJar)
            artifact(javadocJar)
            artifact("$buildDir/libs/swagger-dsl-${properties.getProperty("library.version")}.jar")

            pom {
                name = "SwaggerDSL"
                description = "A Kotlin DSL to define a Swagger definition including generation of YAML and providing the swagger-ui."
                url = "https://github.com/FlowMo7/SwaggerDSL"

                licenses {
                    license {
                        name = "Apache-2.0"
                        url = "https://github.com/FlowMo7/SwaggerDSL/blob/master/LICENSE"
                    }
                }
            }

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.implementation.allDependencies.each {
                    if (it.group != null) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url 'https://nexus.moetz.dev/repository/maven-public/'
            credentials {
                username secretProperties.getProperty("maven.user")
                password secretProperties.getProperty("maven.password")
            }
        }
    }
}